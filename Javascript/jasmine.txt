describe("", function() { 

    beforeEach(function() {
        foo += 1;
    });

    afterEach(function() {
        foo = 0;
    });


    beforeAll(function() {
        foo = 1;
    });

    afterAll(function() {
        foo = 0;
    });


    it("", function() {
        expect(a).toBe(true);
        expect(a).not.toBe(null);
        expect(a).toEqual(12);
        expect(message).toMatch(/bar/);
        expect(message).toMatch("bar");
        expect(message).not.toMatch(/quux/);
        expect(a.foo).toBeDefined();
        expect(a.bar).not.toBeDefined();
        expect(a.foo).not.toBeUndefined();
        expect(a.bar).toBeUndefined();
        expect(null).toBeNull();
        expect(a).toBeNull();
        expect(foo).not.toBeNull();
        expect(foo).toBeTruthy();
        expect(a).not.toBeTruthy();
        expect(a).toBeFalsy();
        expect(foo).not.toBeFalsy();
        expect(a).toContain("bar");
        expect(a).not.toContain("quux");
        expect(e).toBeLessThan(pi);
        expect(pi).not.toBeLessThan(e);
        expect(pi).toBeGreaterThan(e);
        expect(e).not.toBeGreaterThan(pi);
        expect(pi).not.toBeCloseTo(e, 2);
        expect(pi).toBeCloseTo(e, 0);
        expect(foo).not.toThrow();
        expect(bar).toThrow();
        expect(foo).toThrowError("foo bar baz");
        expect(foo).toThrowError(/bar/);
        expect(foo).toThrowError(TypeError);
        expect(foo).toThrowError(TypeError, "foo bar baz");
    });
});

